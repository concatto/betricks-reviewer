{"version":3,"sources":["ReviewerChooser.jsx","App.js","serviceWorker.js","index.js"],"names":["availableReviewers","ReviewerChooser","React","useState","keys","value","obj","forEach","key","mapToObject","selected","setSelected","chosen","setChosen","Container","maxWidth","Box","alignItems","py","Typography","align","variant","pb","FormControl","component","FormLabel","FormGroup","Object","map","developer","FormControlLabel","label","control","Checkbox","checked","onChange","e","isSelected","updateSelected","target","Button","disabled","values","every","s","color","size","onClick","pool","filter","Math","floor","random","length","undefined","pt","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qWAKMA,EAAqB,CACzB,gBACA,oBACA,aACA,eACA,iBACA,iBAmFaC,MAtEf,WAA4B,IAAD,EACOC,IAAMC,SAXxC,SAAqBC,EAAMC,GACzB,IAAMC,EAAM,GAMZ,OAJAF,EAAKG,SAAQ,SAACC,GACZF,EAAIE,GAAOH,KAGNC,EAIwCG,CAAYT,GAAoB,IADtD,mBAClBU,EADkB,KACRC,EADQ,OAEGT,IAAMC,WAFT,mBAElBS,EAFkB,KAEVC,EAFU,KAiBzB,OACE,kBAACC,EAAA,EAAD,CAAWC,SAAS,MAClB,kBAACC,EAAA,EAAD,CAAKC,WAAW,SAASC,GAAI,IAC3B,kBAACC,EAAA,EAAD,CAAYC,MAAM,SAASC,QAAQ,MAAnC,uBAGF,kBAACL,EAAA,EAAD,CAAKC,WAAW,SAASK,GAAI,GAC3B,kBAACC,EAAA,EAAD,CAAaC,UAAU,YACrB,kBAACC,EAAA,EAAD,CAAWD,UAAU,UAArB,mBACA,kBAACE,EAAA,EAAD,KACGC,OAAOvB,KAAKM,GAAUkB,KAAI,SAACC,GAAD,OACzB,kBAACC,EAAA,EAAD,CACEtB,IAAKqB,EACLE,MAAOF,EACPG,QACE,kBAACC,EAAA,EAAD,CACEC,QAASxB,EAASmB,GAClBM,SAAU,SAACC,GAAD,OA9B5B,SAAwBP,EAAWQ,GACjC1B,EAAY,eACPD,EADM,eAERmB,EAAYQ,KA2BkBC,CAAeT,EAAWO,EAAEG,OAAOL,UACpD7B,MAAOwB,YASrB,kBAACb,EAAA,EAAD,CAAKC,WAAW,UACd,kBAACuB,EAAA,EAAD,CACEC,SAAUd,OAAOe,OAAOhC,GAAUiC,OAAM,SAACC,GAAD,OAAa,IAANA,KAC/CvB,QAAQ,YACRwB,MAAM,UACNC,KAAK,QACLC,QAvCR,WACE,IAAMC,EAAOrB,OAAOvB,KAAKM,GAAUuC,QAAO,SAAApB,GAAS,OAAInB,EAASmB,MAEhEhB,EAAUmC,EAAKE,KAAKC,MAAMD,KAAKE,SAAWJ,EAAKK,YA+B3C,yBAWUC,IAAX1C,GACC,kBAACI,EAAA,EAAD,CAAKC,WAAW,SAASsC,GAAI,GAC3B,kBAACpC,EAAA,EAAD,CAAYE,QAAQ,WAApB,4BAGA,kBAACF,EAAA,EAAD,CAAYE,QAAQ,MACjBT,MCxDE4C,MAzBf,WAoBE,OACE,kBAAC,EAAD,OCdgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8f78d4e7.chunk.js","sourcesContent":["import React from 'react';\nimport { \n  Container, Box, Typography, FormControl, FormControlLabel, FormLabel, FormGroup, Checkbox, Button\n} from '@material-ui/core';\n\nconst availableReviewers = [\n  'Felipe Dalcin',\n  'Fernando Concatto',\n  'Garrik Bez',\n  'Paulo Amaral',\n  'Rafael Dalpiaz',\n  'Richard Neves',\n];\n\nfunction mapToObject(keys, value) {\n  const obj = {};\n\n  keys.forEach((key) => {\n    obj[key] = value;\n  });\n\n  return obj;\n}\n\nfunction ReviewerChooser() {\n  const [selected, setSelected] = React.useState(mapToObject(availableReviewers, true));\n  const [chosen, setChosen] = React.useState();\n\n  function updateSelected(developer, isSelected) {\n    setSelected({\n      ...selected,\n      [developer]: isSelected,\n    });\n  }\n\n  function chooseRandomly() {\n    const pool = Object.keys(selected).filter(developer => selected[developer]);\n\n    setChosen(pool[Math.floor(Math.random() * pool.length)]);\n  }\n\n  return (\n    <Container maxWidth=\"sm\">\n      <Box alignItems=\"center\" py={12}>\n        <Typography align=\"center\" variant=\"h3\">Escolha de Revisor</Typography>\n      </Box>\n\n      <Box alignItems=\"center\" pb={8}>\n        <FormControl component=\"fieldset\">\n          <FormLabel component=\"legend\">Desenvolvedores</FormLabel>\n          <FormGroup>\n            {Object.keys(selected).map((developer) => (\n              <FormControlLabel\n                key={developer}\n                label={developer}\n                control={(\n                  <Checkbox \n                    checked={selected[developer]}\n                    onChange={(e) => updateSelected(developer, e.target.checked)} \n                    value={developer}\n                  />\n                )}\n              />\n            ))}\n          </FormGroup>\n        </FormControl>\n      </Box>\n\n      <Box alignItems=\"center\">\n        <Button\n          disabled={Object.values(selected).every((s) => s === false)}\n          variant=\"contained\"\n          color=\"primary\" \n          size=\"large\" \n          onClick={chooseRandomly}\n        >\n          Sortear revisor\n        </Button>\n      </Box>\n\n      {chosen !== undefined && (\n        <Box alignItems=\"center\" pt={6}>\n          <Typography variant=\"caption\">\n            O revisor escolhido foi:\n          </Typography>\n          <Typography variant=\"h4\">\n            {chosen}\n          </Typography>\n        </Box>\n      )}\n    </Container>\n  )\n}\n\nexport default ReviewerChooser;","import React from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport ReviewerChooser from './ReviewerChooser';\n\nfunction App() {\n  // return (\n  //   <div className=\"App\">\n  //     <header className=\"App-header\">\n  //       <img src={logo} className=\"App-logo\" alt=\"logo\" />\n  //       <p>\n  //         Edit <code>src/App.js</code> and save to reload.\n  //       </p>\n  //       <a\n  //         className=\"App-link\"\n  //         href=\"https://reactjs.org\"\n  //         target=\"_blank\"\n  //         rel=\"noopener noreferrer\"\n  //       >\n  //         Learn React\n  //       </a>\n  //     </header>\n  //   </div>\n  // );\n\n  return (\n    <ReviewerChooser/>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}